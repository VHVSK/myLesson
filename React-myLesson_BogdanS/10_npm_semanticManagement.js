// Середа виконання JS
// Щоб використовувати пакет в якомусь додатку, потріно створити
// package.json

// package.json - створюється за допомогою команди: npm init, це робиться тільки один раз при ініціалізації додатка

/**
 * {
  "name": "my-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "build": "node scropts/build.js",
    "test": "node scropts/test.js",
  },
  "author": "Viktor",
  "license": "ISC",
  "dependencies": {
    "moment": "^2.29.3",
    "bootstrap": "^5.1.3",
    "react": "^18.1.0"
  }
}
 */

// scripts - скрипти
// dependencies - залежності, вони потрібні щоб швидко встановити їх на будь якому компютера, і не зберагати їх при транспортування нашого проекту, а просто встановити їх. Вствновлення залежностей за допомогою команди: npm install
// таким чином він встановить всі пакети в папку nodeModules сам створить її

// СИМАНТИЧНЕ УПРАВЛІННЯ ВЕРСІЙ
// "bootstrap": "^5.1.3",
// "react": "~18.1.0"
// "moment": "2.29.3",

// 5 - major, основна версія, коли внесли кардинальні зміни
// 1 - minor, мінорна версія, коли додали новий функціона, при цьому старий функціонал залишився
// 3 - patch, патч версія, коли змінився нечелика частина функціоналу

// тому якщо змінилася існовна версія і оновити додавток то можуть бути несімісності
// детальніше semver.org

// ^ - якщо стоїть, то допускаються міноріа та патч пакети, тобто npm install може встановити вище значення, наприклад: 5.2.4
// ~ - якщо стоїть, то допускаються патч пакети, тобто npm install може встановити вище значення, наприклад: 5.1.5
// якщо нічого, то ніяких оновлень

// СКРИПТИ NPM та ЗАПУСК
// "start": "node index.js"

// npm start - тобто, щоб не писати повний текст "node index.js", можна просто написати "start"
// npm run build - аналогічно, тільки не зрозумів чому run пписати
// npm test - аналогічно
