// Примітивний тип, їх 6
// string - 'Hello World'
// boolean - логічний
// number - 6
// null - значення відсутне, ми присвоюємо, а не інтерпритатор
// undefined - значення немає, не створене, присвоює інтерпритатор
// symbol

const a = 10 // число
const b = 'name' // строка, бажано використовувати одинарні кавички, або тільки подвійні, або тільки одинарні

// Тип який посилається на значення
// Він 1, це об'єкт

// Приклад об'єкта, він має посиланняна пам'ять в машині
// Масив йе типу як масив, але такого типу як масив немає
// Масив це є об'єкт
// {
//     a: 10,
//     d: true
// }

// таким чином ми можемо мати різні змінні, які мають посиалння та один і той самий об'єкт в пам'яті
// таким чином, !!! змінюючи властивість в одній змінній, ми змінимо всі змінні які ма.ть посилання на цей об'єкт

// Перевіримо типи данних, приймаємо масив, перебрати його та перевірити через колбек функцію чи це число
if (numbers.some((num) => typeof num !== 'number')) {
  console.error('Всі аргументи мають бути числами!')
  return // щоб не йти далі
}

const objectA = {
  a: 10,
  b: true,
}

// маємо змінну та значення, значення це ПОСИЛАННЯ на об'єкт!!!

// Створимо копію
const copyOfA = objectA

// Тепер ми маємо дві змінних: objectA та copyOfA
// Вони мають однакове посилання на об'єкт

copyOfA.a = 20

console.log(copyOfA.a) // -> 20
console.log(objectA.a) // -> 20

// Як видно, обидві змінні змінені

// Також, можна додавати нові властивості об'єкту
copyOfA.c = 'abc'
console.log(objectA.c) // -> abc

// Ctrl + R  - очистити консолі браузера і очищення пам'ті

// ДИНАМІЧНА ТИПІЗАЦІЯ (не статична)
// В JS немає необхідності вказувати тип змінної
// змінювати тип данних в JS можна !!!

// наприклад:
let f = 'abc' // String
f = 10 // Number
f = true
f = undefined

// наприклад 2:
function g() {
  console.log('Hello')
}

g() // Hello
g = 10
g() // Error, is not a function

// Це недолік, потрібно слідкувати за цим!!!
// Старайтеся максимально використовувати тип const
// Ще один варіант запобігти цього, це використанні стрілочної функції
const a = () => {
  // початок синтаксиса стрілочної функції () => {
  console.log('Hello World')
}

a() // -> Hello World
a = 10 // Error, так як назва функції, сама функція це константа

a()
