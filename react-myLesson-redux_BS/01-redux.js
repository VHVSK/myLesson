// ! REDUX
// Централізовано управляти станом компонетів, це незалежна бібліотека, використовують не тільки в Реакт
// Якщо компонент змінює стан тільки своєму компоненті, то не потріно створювати централізовний стан, а якщо приходиться тягнути стан через багато компонентів, то в такому разі потрібно створити централізований стан, функцію централізовного стану і виконує Redux

// ! Ключові поняття
// Ми маємо в проекті React Components
// 1. STATE - це те, де зберігається безпосередньо інформація о стані всього додатка, це не змінюємий об'єкт (в реакті також не можна, але можна створювати новий стан)
// 2. REDUCER - його задача, це створення нового стану! Він завжди повертає при обробці новий стан, не змінений, а новий.
// 3. STORE, тобто: STATE та REDUCER - знаходяться в Redux STORE, вони формують Redux STORE. 
// Кожен компонент приходить в STORE за станом! А також, компоненти можуть ложити стан в STORE, але це відбувається не на пряму, а через Reducer!
// 4. ACTION - розуміння дії, за допомогою дій можна впливати на центральний стан всьго додатку! Тобто, можна стоворювати стан на основі попереднього стану, а також певної дії. 
// Дійство - це об'єкт JS, в якому є слово type, наприклад:
{
  type: 'CLEAR_TODOS'
}
// Також, щоб зробити опис дії, додають ще одну властивість:
{
    type: "ADD_TODO",
    payload: {
        id: 1,
        text: 'Learn Redux',
        isCompleted: false
    }
}

// React Components та ACTION - створють STORE

// ! Чиста функцій (Pure function)
/** 
Це загальна концепція:
- Тобто, передбачувана - повертає однаковий результат при таких самих вхідних даних!!!
- не змінює зовнішні змінні.
- не залежить від зовнішніх змінних та від стану програми та не використовує зовнішні змінні.
- не взаємодіє з зовнішніми ресурсами, типу БД, мережа і файлова система.

Так от, в Redux - REDUCER якраз і є чиста функція.
REDUCER - це чиста функція, це потріно ПАМ'ЯТАТИ!

Завдяки цьому, REDUCER створюється новий стан на основі пепереднього стану і дії, і тк як він є чистою функцією - можна на основі начального стану та всіх дій які виникали в різний момент часу - ПОВЕРНУТИ ДО ПЕВНОГО СТАНУ ЛЮБОГО МОМЕНТУ ЧАСУ В МИНУЛОМУ! Попередні стани він не змінює.
*/

// ! Принцип роботи та переваги Redux - в React
/**
 * ! Принцип роботи:
 * Ми маємо:
 * - компонети
 * - Redux (Store (Reducer + State))
 * 
 * В компоненті виникає подія, компоненти генерують події,
 * і ця операція назтвається DISPATCH (тобто відправка, відправка події), тобто задача компонента відправити подію, а подія, як ми знаємо, цн об'єкт який має властивість type.
 * 
 * Отже, компонент генерує та відправляє подію.
 * Отримувач події є Redocer, він прйимає дії та поточний стан, обробляє їх та повертає новий стан.
 * В свою чергу, компоненти SUBSCRIBE (підписані) на зміну стану в STATE. Також, так як не завжди потірні всі стани, то можна підписатися тільки на оновлення певних частин стану.
 * 
 * Отже:
 * COMPONENTS -> DISPATCH -> ACTION -> STORE (REDUCER -> STATE -> REDUCER
 *      -> SUBSCRIBE -> COMPONENTS)
 * 
 * ! ПЕРЕВАГИ:
 * - Централізоване управління станом
 * - Масштабованість (середні та великі проекти)
 * - Передбачяуваність оновлення стану
 * - Ефективна комунікаація між компонентами
 * - Легша обробка помилок додатка
 * - Моливість переходу до любогостану додатка в минулому.
 */
