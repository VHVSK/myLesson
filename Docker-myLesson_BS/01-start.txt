Docker - для розробки та запуску додатків в контенерах.
Можна використовувати як в процесі розробки так і в продакшині (використовувати з надбудовою Kubernetes - керує запуском різних контейнерів Docker на різних серверах).

План курсу
1. Термінологія та ключові фугнкції
2. Встановлення та запуск
3. Скачування образів та створення контейгнерів
4. Відкриття портів та доступа до додатків всередині контейнерів
5. Приєднання томів до контейнерів для збереження даних
6. Створення образів за допомогою Dockerfile
7. Docker Compose для запуска декількаох контейнерів 

Практичні задачі
1. Запустимо веб сервер NGINX
2. Створимо власний образ для запуска додатка Python
3. Створимо власний образ для запуска додатка Node.js
4. Створимо та запустимо додатки, створені з двух сервісів - Python, MongoDB використовуючи Docker Compose

А також:
1. Запуск веб додатка з 4 сервісів, використовуючи Docker Compose
2. Налаштуємо тома, порти та змінні середовища для цих сервісів
3. Продовжимо розробку веб додатка, запущеного в Docker, використовуючи функцію hot reload
4. Опублікуємо локально створені образи на Docker Hub

Склад веб додатка:
1. Фронтенд Vue.js
2. Бекенд Node.js (зв'язок з Vue.js через API)
3. База даних MySQL
4. Управління БД - Adminer

___

Чому варто використовувати Docker?
1. Запуск в ізольованому середовищі
2. Легко запускати додатки на різних серверах
3. Всі залежності додатків встановлюються в середині контейнерів
4. Додатки легко маштабувати, шляхом збільшення кількості контейнерів
5. Легко використовувати в процесі розробки додатків

___

Контейнер - це самий маленький елемент у світі Docker, це основний компонент і всі додаки запускаються в контейнерах.

___

Компоненти:
1. CLIENT (запускається в командній строці, можна підключатися джо служби докер, як на локальном так і відділено, частіше локально)
2. DAEMON (служба, відповідає за всі задачі створення контейнерів і по обробки запитів від клієнтів)
3. HOST (комп на якому запущений докер)

Отже, клієнт взаємодіє зі службою яка запущена на хості.

Також, є:
4. CONTAINER (це самий маленький елемент у світі Docker, це основний компонент і всі додаки запускаються в контейнерах.)
5. IMAGE (образ, екземпляр, основа для створення контейнерів, з одного зразка можна стоврити багато контейнерів)
6. REPOSITORY (знаходяться різні версії образів)
7. REGISTRY (знаходяться різні репозиторії, може бути як локальний так і віддалений. Самий популярний віддалений це docker hub)

Як працює:
--
Linux (комп) ->
Linux Kernel (ядро) ->
RAM - CPU - Network (оперативна пам'ять - процесесор - мережеві ресурси) -> 
Disk (файли та папки) ->

    Docker Engine
    Docker DAEMON

--
Linux -> запуск ізольовних контейнерів
Disk -> файли ізольовних контейнерів
все інше спільне - тому потрібно слідкувати за розподіленням пам'яті!
Також, спільні файли будуть знаходитися в одному місці пам'яті
Якщо зупинити контейнер, всі файли дилаляються.
Якщо в контейнері немає процесів, то докер зупиняє цей контейнер.

___

Docker парцює на Linux, тому для запуска на Windows, Mac потрібне встановлення Docker Desctop (Linux VM)(віртуальна машина)
А на серверах зазвичай Linux

___

IMAGE - образ, статичний, з одного образа можна створити багато контейнерів, тобто на основі образа сторються контейнери, різниця між ними така, що в контейнерах є запущені процеси. Образи статичні, а контейнери динамічні.

IMAGE -> CONTAINER
      -> CONTAINER
      -> CONTAINER
      -> CONTAINER

Образ складається:
- шар 3
- шар 2
- шар 1
- базовий шар

Структура шарів, щоб можна було перевикористовувати шари в інших шарів, та створювати образ з різних шарів.
- Шари доступні тільки для читання. Всі шари read-only, але їх модна копіювати та видаляти.
- образи можна переміщувати та видаляти.
- образи зберагаються в репозиторії 
- Бувають офіційні образи та образи спільноти

____

REPOSITORY - по аналогії Git, це набір різних версій якогось певгного образа.

REPOSITORY 
складається з версій ->
версія:
     latest - тег
     8.0.1 - тег

версія:  
     -- 7 - тег
     -- 7.4 - тег
     -- 7.4.3 - тег
     
версія:  
     --- 5 - тег
     --- 5.0.8 - тег

latest - сама актуальна версія (щоб запустити саму актуальну версію, то використовуйте тег latest)

Репозиторії можна збергати локально на своєму компі або завантажувати на docker hub

___

Що потріно щоб коритсуватися Docker:
1. Встановити Docker Desctop (Mac or Windows) or Docker Engine (Linux)
    https://www.docker.com/products/docker-desktop/
    Скачати та вставноити його, відкрити та відкрити Dashboard

Далі відкрити термінал PowerShell
Щоб перевірити версію докера та сервера:
docker version

- ...
- Version:           20.10.23
- Server: Docker Desktop 4.17.1 (101757)
- OS/Arch:          linux/amd64
- ...

Якщо ми бачимо такий вивід, то все гараз, докер доступний та можна працювати.

Клієент може підключатися як до віддаленого та локального сервісу.
Це свіідчить про те, що клієет та сервер незалежні один від одного.

2. Редактор кода VSC та розширення Docker



