// Розробка веб-додатка TIME APP

/**
 * Працювати буде наш додаток на:
 * Vue.js - фронтенд
 * Node.js - бекенд
 * MySQL - БД
 * Adminer - керування базою данних
 *
 * Нам потрібно буде відкрити порти для достьува ззовні.
 * Внутрішні порти:
 * фронтенд - 3000
 * бекенд - 5000
 * БД - 3306
 * Adminer - 8080
 *
 * Зоавнішні порти:
 * фронтенд - 3333
 * бекенд - 5555
 * БД - до БД доступа ззовні не буде! З БД будуть працювати бекенд та Adminer в середині. Так має бути, це додатковий рівень захисту.
 * Adminer - 8888
 *
 * Визодить такий мепінг^
 * 3333 -> 3000
 * 5555 -> 5000
 * 8888 -> 8080
 */

// ! План зщапуска додатка в Docker
/**
 * папка додатка: time-app
 *
 * 1. Запуск Docker в контейнерах для подальшої розробки
 * 2. Створити Dockerfile для фронтенд сервіса Vue.js
 * 3. Створити Dockerfile для бекенд сервіса Node.js
 * Створити ці Dockerfile ми будемо для того, щоб запустити фронтенд та бекенд додатки в середині кронтейнера, для цього потрібно стоврити ВЛАСНІ образи!
 * 4. Знайти підходящі образи для сервісів MySQL і Adminer на Docker Hub
 * 5. Створити docker-compose.yml фаул та описати в ньому 4 сервіса, включаючи налаштування мепанга потрів та томів, а також змінні середовища для деяких із сервісів. Будуть інструкції по створеню образів фронтенд та бекенд, а для MySQL і Adminer в нас будуть інструкції на те, який образ з Docker Hub використовувати для сервісів MySQL і Adminer
 * 6. Запустити сервіси та продовжити розробку.
 *
 * Також обговоримо функцію hotreload, яка позволить відразу вносити зміни в ході розробки.
 * Також, нагадуємо, сервізи взаємодіють використовуючи імена.
 */

// ! Огляд фронтенда
// ! Запуск фронтенда без докера
/**
 * Перейти в терміналі в папку frontend
 * Викронати команду встановлення залежносте npm i
 * Викронати команду яка прописана в файлі package.json, в розділі scripts:
 * dev - запустити в режимі розробки, таким чином автоматично доступка функція hotreload
 * build - створити продакшн, кінцеву версію, буде створена папка зі статичними ресурсами які можна викладати на сервер, наприклад nginx
 * Щоб запустити команду
 * * npm run dev
 *
 * Аналогічний запит на потрібно буде виконати при запуску в контейнері длокер, тільки через інструкції Dockerfile
 */

// ! Запуск фронтенда в контейнері Docker
/**
 * Для запуска ми переходимо в папку frontend
 * Стоврюємо файл Dockerfile та заповнюємо його, пояснення там
 * Ми можемо продовжути, а можемо вже протестувати та запустити в контейнері
 *
 * Тестове створення образу:
 * Перйети в терміналі в папаку frontend
 * * ls
 * Перевірити чи є тут файл Dockerfile
 * Для запуска з назвою файла Dockerfile
 * docker build .
 * А з іншою назвою -f file_name:
 * docker build . -f Dockerfile-prod
 * Також запущений Docker Desctop
 * Також використовуючи опцію -t ми може дати ім'я образу:
 * * docker build . -t time-app-frontend
 * => => naming to docker.io/library/time-app-frontend
 * * docker images
 * time-app-frontend        latest    fad6599ca12b   About a minute ago   237MB
 *
 * Тестовий запуст новоствореного образу, створення контейнеру на сонові новоствореного образа:
 * * docker run -p 3000:3000 time-app-frontend
 * > Local:    http://localhost:3000/
 * > Network:  http://172.17.0.2:3000/
 * Щоб проінспектувати що в середині контейнера, потрібно зайти в оболочку sh як ми це робили раніше, відкрити нову вкладку терміналу та виконати
 * * docker ps
 * de4a47e60341
 * * docker exec -it de4a47e60341 sh
 * /app #
 * * ls -la
 * маємо папку node_modules
 * drwxr-xr-x    1 root     root          4096 Mar 30 18:40 node_modules
 * * npm --version
 * 9.5.1
 * * exit
 *
 * Поветаємося в попередню вкладку:
 * * Ctrl + C
 * * docker ps -a
 * бачиом контейнер бів ствропний на основі образа time-app-frontend, статус Exited
 */
