// Створення контейра busybox:
// * docker run busybox

// Далі:
// * docker ps -a

// Бачимо, запускається процес оболочки Linux - "sh", якщо ми не не підключаємося до нього, то він зупиняється.
// Бачимо, був запущений та зупинений контейнер. Так як результат нікуди не передавався, щоб він був запущений, данні мають передаватися.

// Далі, давайте спробужемо:
// * docker run -i -t busybox
// * docker run -it busybox

// i - інтерактивний
// t - термінал
// it - аналогічно, тільки скорочено

// Якщо ми побачили:
// / #

// Це значить що ми в середині оболочки, і якщо ввести:
// * ls
// * ls -la
// показати навіть приховані файли та папки

// Результат:
// bin    etc    lib    proc   sys    usr
// dev    home   lib64  root   tmp    var

// Ми побачимо список файлів та папок в середині операційної системи.

// * hostname
// * hostname -i

// hostname - то ми побачимо яке ім'я було присвоїне цьому компютеру ( тобто контейнеру) (8bcbf0187476)
// hostname -i - так ми побачимо який IP присвоєний (172.17.0.2)
// IP присвоюється кожному контейнеру автоматично.

// Тепер, первіримо чи є доступ у цього контейнера до інтернету:
// * ping 8.8.8.8

// Маємо відрповідь, що є:
// 64 bytes from 8.8.8.8: seq=0 ttl=36 time=19.403 ms

// Ctrl + C - зупинити пінг.

// Тепер первірмо пінг сайта Гугл:
// * ping google.com

// Аналогічно, є, також бачимо DNS сервер вернув IP і далі IP:
// PING google.com (172.217.16.46): 56 data bytes
// 64 bytes from 172.217.16.46: seq=0 ttl=36 time=18.714 ms

// Далі, ми можемо перевірити, чи працює контейнер:
// * docker ps

// Бачимо його статус UP, працює.

// Можемо зупинити його (за умови якщо ми в процесі):
// * docker stop id_or_name_container
// * exit (вийти з процесу, з контейнера)
// * docker kill

// docker stop - not found - не спрацював (напевно ще потрібно передати ID контейнера, або потрібно бути в самому процесі)
// exit - PS C:\Users\vygov> - спрацював (не зрозуміло, закриває PowerShell).

// * docker ps -a
// бачимо STATUS Exited

// Наступна команда видалить всі контейнери:
// * docker container prune

// Підтвердмо, та побачимо:
// Deleted Containers:
// 8bcbf0187476c8ce07c3ab4ca6b60838bf0bc712c51169d44f5b3fdab26a6267
// 3b549254db8c6d9f56d616698c3c2a398b2fa7e3aa298d48f271524f076e114a
// 733ac8a6c6439f4489322fadfd219b5e910576b5af8338775ad38c1f18a7caf6

// Подивимося, які в нас є образи:
// * docker images

// Бачимо:
// REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
// busybox       latest    7cfbbec8963d   8 days ago      4.86MB
// hello-world   latest    feb5d9fea6a5   18 months ago   13.3kB
