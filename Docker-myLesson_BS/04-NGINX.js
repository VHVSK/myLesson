// NGINX
// ......
// 1
// ......

// ! Запустимо контейнер NGINX

// Nginx (вимовляється як «engine-x») — це зворотній проксі-сервер із відкритим кодом для протоколів HTTP, HTTPS, SMTP, POP3 та IMAP, а також балансувальник навантаження, HTTP-кеш і веб-сервер (оригінальний сервер).

// * docker run nginx

// Як ми бачос, відбулося завантаження, запус, а також термінал був автоматично підлючений до цього процесу. Наразі ми бачимо логи серверу.
// Тож, виникає питання, як нам підключитися до веб сервуру, так як повернутися в командний рідок.

// Отже, давайте відкриємо нову вкладку терміналу, введемо:
// * docker ps

// CONTAINER ID   a0641950aa66
// PORTS   80/tcp

// 80/tcp - порт за умовчанням по HTTP

// Цей порт відкритий процесом nginx, так як веб сервер працює на якомусь із портів. Порт 80, протокол tcp
// Тепер ми можемо підключитися з браузера до цого проту 80

// НАРАЗІ ми не можемо підключитися до NGINX веб серверу зі свого комп'ютера!!!!

// Щоб підключитися, потрібно налаштовувати мепінг портів, це трохи підніше.

// ......
// 2
// ......

// ! Тепер давайте підключимося в фоновому режимі, щоб термінал не підключався відразу до процесу.

// Зупинити попередній процес.
// Перевірити, тоді запустити:

// * docker run -d nginx

// -d - від'єднаний (detached)

// Ми отримаємо ID контенера і ми повернулися в командну строку:
// 2f55453cca4dc94bedb7bd0ed85550f2f97524b1f305dfb2ef901655bc117c18

// Тепер nginx веб сервер працює у фоновому режимі.
// зверніть увагу, завжди створюються нові контенери, зупинені так і лишаються зщупиненими.

// Але ми не можемо підключитися через браузер до нього, давайте перевіримо це.

// Знайдемо код контейнера:
// * docker ps (2f55453cca4d)

// Знайдемо IP:
// * docker container inspect 2f55453cca4d

// Або (цей варіант не спрацював):
// * docker container inspect 2f55453cca4d | grep IPAddress

// Вивід досить великий, але нас цікавить "IPAddress": "172.17.0.2"

// Як зупинити контейнер?
// По цого ID або назві!

// docker ps - маємо 2f55453cca4d
// docker stop 2f55453cca4d
// або убийте один або кілька запущених контейнерів:
// docker kill 2f55453cca4d

// Маємо вивід 2f55453cca4d знасть зупинили!

// ! Також, можна запускати додаткові процеси в запущеному контейнері:

// * docker exec -it 35847fd7b7ec bash

// exec - виконати команду в зупущеному процесі, запустити додатковий процес
// -it - опциї підключення інтерактивного терміналу, підключає наш термінал до прочесу в середині контейнера
// 35847fd7b7ec - ID контейнера
// bash - назва процеса

// В результаті ми отримали вивід і попали в середину контейнера:
// root@35847fd7b7ec:/#

// 35847fd7b7ec-  id контейнера, також можна отримати її ввівши команду hostname:
// 35847fd7b7ec

// Далі перейдемо в папку з html:
// * ls
// * cd /usr/share/nginx/html
// * ls -la

// Бачимо:
// ...
// -rw-r--r-- 1 root root  615 Dec 13 15:53 index.html

// Прочитаємо його:
// * cat index.html

// <!DOCTYPE html>
// <html>
// <head>
// <title>Welcome to nginx!</title>
// <style>
// html { color-scheme: light dark; }
// body { width: 35em; margin: 0 auto;
// font-family: Tahoma, Verdana, Arial, sans-serif; }
// </style>
// </head>
// <body>
// <h1>Welcome to nginx!</h1>
// <p>If you see this page, the nginx web server is successfully installed and
// working. Further configuration is required.</p>
// <p>For online documentation and support please refer to
// <a href="http://nginx.org/">nginx.org</a>.<br/>
// Commercial support is available at
// <a href="http://nginx.com/">nginx.com</a>.</p>
// <p><em>Thank you for using nginx.</em></p>
// </body>
// </html>

// Щоб завершити процес bash:
// * exit

// Але контейнер ще працює!
// * docker ps

// ! Щоб створити своє ім'я для контецнера:
// * docker run -d --name my_nginx nginx

// Отримали ID:
// 8daacaa6b358b22ac5e2389fbfd3bf8b5299613ce24822f6d3d8a08842da2f1d

// * docker ps
// NAMES  my_nginx

// Завершимо:
// * docker stop my_nginx
// * docker container prune
// * docker ps -a

// ! Публікація портів
// * docker run -d -p 8080:80 nginx
// Зарпустимо також другий контйнер
// * docker run -d -p 8081:80 nginx

// docker run - створити та зупустити контейнер
// -p - Публікація порта
// -d - від'єднаний, щоб не заходити в середину
// 8080 - зовнішній порт
// 80 - порт контейнера
// nginx - назва образа

// nginx сервіс всередині контейнера працює на порті 80, але рекомендують коритсуватися на вищому порті 8080. Докер перекидає з 80 на 8080
// * docker ps
// В колонці ПОРТ - 0.0.0.0:8080->80/tcp, як видно, що є мепінг портів. Вказаний IP 0.0.0.0 - це значить, що на своєму компютері, включаючи localhost, http://127.0.0.1:8080/, http://localhost:8080/
// Перейти в браузері і ми побачимо сторінку nginx за умовчанням
// * http://localhost:8080/ - ввести в браузер, і сервер nginx працює!
// 2 контейнер в браузері
// * http://127.0.0.1:8081/ - 8081 аналогічно

// Зверніть увагу, внітрішні порти ->80/tcp, а зовнішні вже мають бути різними! Мепінг з однаковити зовнішніми портами не можна запустити!
// Зупинемо обидва севери:
// * docker stop beeed196cd49 c153b7e233ca
// * docker ps

// ! Мепінг томів в docker (папок)
// Можна замінити сторінку за умовчанням
// * docker run -v ${PWD}:/usr/share/nginx/html nginx

// docker run див. вище
// -v - підключенння тома
// ${PWD} - шлях до локальної папки, це змінна яка вказує шлях до поточної папки, вона присутня у всії ОС, також можна вказати інший шлях
// : - розділення шляхів
// /usr/share/nginx/html - шлях до папки в середині контейнера
// nginx - назва образа

// Щоб перемірити в якій ми зараз папці:
// * echo ${PWD}
// C:\Users\vygov

// ! Створення власної сторінки для nginx
// Відкрити VSC та відкрити вбудований термінал, перейти на робочий стіл та створити папку docker
// * ls
// * cd Desktop
// * mkdir docker
// * cd docker
// Вікрити в VSC
// * code .
// Стоврити папку nginx та файл index.html

// Тепер можемо вводити строку, тільки додамо ще...
// Додамо ще мепінг портів -p 8080:80 та запуск в -d фоновому (в бекграунді) режимі:
// * docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d nginx
// 27807eb43737...
// * docker ps
// 27807eb43737   nginx     "/docker-entrypoint.…"   36 seconds ago   Up 35 seconds   0.0.0.0:8080->80/tcp   hungry_dewdney

// Відкриватйе браузер http://localhost:8080/
// Ми бачимо, що вже видно модифіковану сторінку, нашу сторінку

// ! Підемо в середину контейнера
// * docker ps
// Беремо його ID 27807eb43737
// Увійти в термінал контейнера
// * docker exec -it  27807eb43737 bash
// Перейти в папку
// * cd /usr/share/nginx/html
// Вивести файли та приховані файли
// * ls -la
// Бачимо
// -rwxrwxrwx 1 root root  323 Mar 27 18:32 index.html
// Прочитажмо цей файл
// * cat index.html
// В результаті ми бачимо код html сторінки яку ми стоврили
// Можна вийти з контейнера!

// ! Тепер давайте спробуємо варіант з повним шляхом
// Дізнаємося та скопіюємо абсолютний шлях в нашій ОС
// * echo ${PWD}
// C:\Users\vygov\Desktop\docker\nginx
// Тепер використаємо повний шлях в місці до :
// також замінимо потр на інший
// docker run -v ${PWD}:/usr/share/nginx/html -p 8081:80 -d nginx
// * docker run -v C:\Users\vygov\Desktop\docker\nginx:/usr/share/nginx/html -p 8081:80 -d nginx
// Все, ми тут:
// http://localhost:8081/

// ! Автоматичне видалення зупинених контейнерів
// ! --rm - автоматично видалити контйенер коли він буде зупинений, а зупиняється він коли в ньому немає процесів або вручну docker stop
// Якщо ми зупинемо контейнер, то він буде в зупинених
// * docker ps
// * docker stop 3173bd7e0313
// * docker ps -a
// В зупинених буде Exited
// Давайте видалимо всі зупинені контейнери
// * docker container prune

// Тепер, запустимо інший контейнер
// * docker run -it --rm busybox
// Ми в середині контейнеру і підключені до процесу
// * ls

// І, якщо ми exit з контейнеру, то ми автоматично зупинемо контейнер, і завдяки запису --rm він буде автоматично видалений, перевіримо
// * docker ps
// Як бачимо нічого немає

// ! Як розділити довгі команди на строки
// Щоб розбити контаду, використовуйте зворотній слеш
/**
docker run \
--name my_nginx \
-v C:\Users\vygov\Desktop\docker\nginx:/usr/share/nginx/html \
-p 8888:80 \
-d \
--rm \
nginx

// В powerShell ` (зворотня кавичка)
docker run `
--name my_nginx `
-v C:\Users\vygov\Desktop\docker\nginx:/usr/share/nginx/html `
-p 8888:80 `
-d `
--rm `
nginx

// Працює:
// 3060c93e083016...
 */

// ! Вивід інформації про прив'язки томов
// * docker container inspect my_nginx

/**
 *  "Mounts": [
            {
                "Type": "bind",
                "Source": "C:\\Users\\vygov\\Desktop\\docker\\nginx",
                "Destination": "/usr/share/nginx/html",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }
        ],
 */

// Як видно, папка на комп'ютері:
// "Source": "C:\\Users\\vygov\\Desktop\\docker\\nginx",
// І в контейнері
// "Destination": "/usr/share/nginx/html",
// Також, у виводі є hostname, повний ID контейнера і т. п.

/**
 * "State": {
            "Status": "running",
            "Running": true,
 */

/**
 * "Ports": {
        "80/tcp": [
            {
                "HostIp": "0.0.0.0",
                "HostPort": "8888"
            }
        ]
    },
    */

// ! Docker Desctop
// Можна користвувати і декстопній версії
// натискаючи на процем, ми можемо бачити що там
// Можна відкрити термінал в середині процесу
// Можгна переавірити які закачані образи

// також, в VSC є розширення Docker

// ! На закінчення
// * docker stop id_or_name_container
// * docker ps -a
// CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
