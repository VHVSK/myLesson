/**
 * Модуль HTTP
 * Позволяє стоврювати http сервер
 * Відправляти http запити на інші сервери
 * Запускається і виконує безкінечний цикл очікування подій
 */

// ! Створити HTTP сервер
// Приклад дуже простого HTTP серверу

// Імпорт з вдуованого модуля
const http = require('http')

// createServer - створити сервер
// req, res - запит від клієнта та відповідь від сервера
const server = http.createServer((req, res) => {
  // res - записати данні у відповідь
  res.statusCode = 200 // статус
  res.setHeader('Content-Type', 'text/html') // тип документа
  res.write('<h1>Hello from the Node.js</h1>') // контент документа
  res.end()
})

server.listen(3000)

// Щоб відправити запит на відділений запит
const http2 = require('http')
const url = 'https://jsonplaceholder.typicode.com/todos/1'

// Працює асинхронно
http2.get(url, (res) => {
  // Виконаємо в разі отримання відповіді від серверу
  let responceBody = ''

  // Реєструємо відстежувача події в залежності від подіє data, data - виникає декілька разів в залежностиі від об'єму данних
  res.on('data', (chunk) => {
    responceBody += chunk
  })

  // Як тільки ми закінчимо отримання данних, відбудеться подія end і після обробки всіх данних
  res.on('end', () => {
    console.log(responceBody)
  })
})

// ! Встановили додаток Thunder Client
// Позволяє тестувати API, позволяє відпрвляти запити на сервер безпосередньо в VSC
// Перед викорисстанням запустити node.js сервер
// Маєно нову іконку, тицяємо, натискаємо на кнопку New Reques
// Вводимо запить http://localhost:5000/html
// Отримуємо відповідь
// також бачимо:
// Status: 200 OK
// Size: 77 Bytes
// Time: 8 ms

// Також, вибирайте метод відправки данних

// Аналог, це програма https://www.postman.com/

// ! Скоротили програму
// винесли функції в окремий файл
// Не забуємо зробити експорт, а потім імпорт

// ! Читання файлу на нашому сервері, обробка помилки, відправка форми html у відповіль звернення на доманю сторінку
// ! Читаємо данні з файлу
// Перевіряючі данні які приходять на наш червер, потріно перевіряти тип контенту та обробляти його відповідно.
// Наприклад, була надіслана форма, а ми могли обробляти тільки JSON

// Якщо ми нічого не повертаємо з серверу, то браузер в режимі очікування!

// Отримуємо данні за допомогою зареєстрованих подій,, потім їх слухаємо та записуємо данні частинами, коли данні всі то виконуємо операції.
// Отримали данні з відправленої форми, розпарсили її за допомогою модуля qs = querystring
// Конвертували об'єкт в сроку
// Якщо в процесі парсингу ми отримали помилку, то ловіть її за допомогою try/catch
// Зверніть увагу, якщо нам потріні числа, то їх потрібно конвертувати, так як ми отримуємо текстові данні.
