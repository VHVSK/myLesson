/**
 * * npm --version
 * - 8.15.0
 *
 * * package.json
 * файл JSON який містить інформацію про проект Node.js або  JS
 * Зазвичай розміщується в креневій папці
 * містить в собі метаданні, версію проекту, опис, автор, список залежностей.
 * Дозволяє ідентифікавати проект та управляти залежностями.
 * В розділі script зазвичай розміщуються команди.
 *
 * * package-lock.json
 * містить точні версії які саме версії встановленні!
 * містить точні версії які варто встановити!
 * Також, список всіх залежностей, які також будуть встановлені!
 *
 * ! Стоврити файл package.json
 * * npm init
 * or
 * * npm init -y
 * - y - не задає уточнюючі питання.
 *
 * ! Встановлення пакетов з npm
 * * npm install express
 * or
 * * npm i express
 * встановить пакет mocha з https://www.npmjs.com/package/express
 *
 * Щоб встановити конретну версію, вказажіть в кінці @1.9.0:
 * * npm install express@1.9.0
 *
 * В розділі dependencies (залежності) є список пакетів та її версія:
 * "dependencies": {
 *       "express": "^16.0.3"
 *  }
 *
 * ! ТАкож, дивіться: урок React: 10_npm_semanticManagement.js
 *
 */

// * Значення версій:
// 5 - major, основна версія, коли внесли кардинальні зміни
// 1 - minor, мінорна версія, коли додали новий функціона, при цьому старий функціонал залишається працюючим.
// 3 - patch, петч версія, коли вносяться не великі зміни, старий функціонал залишається працюючим.

// тому якщо змінилася існовна версія і оновити додавток то можуть бути несімісності
// детальніше semver.org

// * Символи ^ та ~
// ^ - якщо стоїть, то допускаються встановлення новішої мінорної та петч пакету, тобто npm install може встановити вище значення, наприклад: 5.2.4
// ~ - якщо стоїть, то допускаються петч пакети, тобто npm install може встановити вище значення, наприклад: 5.1.5
// - якщо нічого, то ніяких оновлень, тільки конкретна версія!

// ! update
// Автоматично оновлення не відбуваються, щоб оновити пакети потрібно виконати команду:
// * npm update <package-name>
// Будуть оновлені пакети в залежності від вказаних ^ та ~, тобто сумісну версію.
// Щоб оновити до останньої версії, додати суфікс @latest, то команда:
// * npm update <package-name>@latest

// ! uninstall
// Якщо пакет вже не потрібний, щоб видалити його:
// * npm uninstall <package-name>

// ! Щоб встановити глобально пакет
// * npm install -g <package-name>

// nodemon - запускає додаток та відслідковує зміни, якщо є зміни відбувається перезапуст додатку.
// * npm install -g nodemon

// Глобально бажано не встановлювати, бадано тільки ті, які дійсно потрібні!

// ! Список глобальних пакетів
// * npm list -g

// ! devDependencies
// !!! ЗАЛЕЖНОСТІ тільки ДЛЯ ПРОЦЕСУ РОЗРОБКИ
// Припустимо, що ми хочемо запустити додатк тільки в режимі розробника, тоді встановлювати залежності для продакшн режиму не потрібно!
// Потрібно додати --save-dev
// * npm install --save-dev <package-name>
// or
// * npm install -D <package-name>
// Буде стоворена секція devDependencies

// ! Щоб встановити пакети БЕЗ залежностей для розробки
// Припустимо, що ми хочемо запустити додатк тільки в режимі продакшн, тоді встановлювати залежності для розробника режиму не потрібно ЗАВАНТАЖУВАТИ!
// * npm install --only-prod

// ! тільки для розробки
// * npm install --omit-dev

// !!! NPM SCRIPTS
// В секції скрипти, то ми можемо  запускати проекти за допомогою коротких записів в консолі, а інтерпритатор знаходить значення та виконує його.
// Приклад секції:
// "scropts": {
//     "start": "node index.js",
//     "dev": "nodemon index.js",
//     "test": "jest",
// }

// jest - виконуючий файл
// nodemon - виконуючий файл

// В консолі:
// * npm start - не відслідковує зміни
// * npm run dev - відслідковує зміни
// * npm test- запускає тест, поки тестів немає

// ! Ствримо тест
// Файл mult.js та mult.test.js

// ! npm install - може змінити package-lock.json
// Щоб в втановити точно такі залежності як прописані,то виконати команду:
// * npm ci

// npm ci в порівнянні з npm i:
// - не змінює package.json та package-lock.json
// - працює швидше
// - видаляю та встановлю заново папку з модулями
//  - не використовують для встановлення окремих модулів

// рекомендується використовувати npm ci для запуска в продакшині!
