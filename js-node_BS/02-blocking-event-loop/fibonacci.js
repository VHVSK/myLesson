// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 - fibonacci число
// 0, 1, 2, 3, 4, 5, 6, 7,   8,  9, 10 - індекс
// Числа fibonacci - це числа які є сумою двох попередніх чисел

// при нульовому setTimeout ми всеодно чекаємо закінчення функції fib()
setTimeout(() => console.log('Timeout'), 0)

// Недолік цієї фкнкції, це те що блокує цикл подій!!!!!
// В стеці функцій збираються функції, не закінчені енкції, яункції які чекають закінчення рекурсивного визову, поки не виконається фугнкція, не буде виконана інша функція.
// Це фнкція синхроння, і є рекурсивною.
// ЦЕЙ ВАРІАНТ РЕАЛІЗЦІЇ ФУНКЦІЇ ДУЖЕ ЗАТРАТНИЙ І ПРОБЛЕМНИЙ, ТАК ЯК ВИМАГАЄ БАГАТО ПАМ'ЯТІ, МИ ВИРАХОВУЄМО КОЖНЕ ЧИСЛО ПО БАГАТО РАЗІВ
function fib(n) {
  if (n === 0 || n === 1) {
    return n
  }
  // рекурсивна функція, рекурсивні визови
  return fib(n - 1) + fib(n - 2)
}

console.log(fib(40))

// наступний fibonacci-out-of-memory.js
