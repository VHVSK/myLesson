// Виконується на серверах, середовище виконання коду js
// Найкраще виконуэться на unix системах, добре запускати в Docker контейнерах.

// ! Переваги
/**
 * - велика популярність
 * - одна мова програмування для фронтенда та бекенда
 * - відкритий вихідний код та кросплатформеність
 * - велика кількість бібліотек
 */

// Найкраже підходиться обробки потокових данних в реальному часі. Це створення API сервісів. Може працювати одночасно з багатьма потоками.

// Не дуже підходиться для обробки великих задача, таких як для обробки відео або машинного навчання!

// ! Відмінності між JS в браузері та JS node.js
// Глобальний об'єкт - window, а в node.js - global
// В node.js немає DOM
// Адаптація під різні браузери, в node.js можна використовувати всі функції які підтримує node.js
// Немає доступа до файлової системи, а в node.js є доступ до файлової системи.

// ! Перевірка встановлення в терміналі
// * node --version
// * npm --version
// v18.7.0 та 8.15.0

// Встанволення з офіційного сайту node.org
// Також можна вставноити та перемикатися між версіями за допомогою nvm (node version menager) - github.com/nvm-sh/nvm

// ! Вивод в консоль, як виконувати код
// * node index.js
// А в самому файлі буде:
// console.log('Hello World!')

// Також можна виконувати код у вбудованому node repl - інтерактивний інтерпритатор!
// read - прочитати код
// evaluate - аналіз коду та інтерпритація
// print - вивести результат
// loop - почати з початку, при цьому змінні створені раніше зберігаються, в рамках однієї сесії.

/** можна протестувати деякий функціонал в node repl
 * PS C:\...\domains\myLesson> 
 * * node
Welcome to Node.js v18.7.0.
Type ".help" for more information.
* * > const name = 'Bogdan'
undefined
* * > name
'Bogdan'
* * .help
* список доступних команд
* * .editor
* Можливість виконання декількох команд
* * global
* буде об'єкт значень за умловчанням
* * > .exit
* щоб вийти
 */
