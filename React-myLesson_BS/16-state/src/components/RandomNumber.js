import { useState } from 'react'
import generateRandomName from '../utils/generateRandomName'

function RandomNumber(props) {
  const { maxNum } = props
  const [randomNum, setRandomNum] = useState(generateRandomName(maxNum))
  const changeRandomNum = () => {
    setRandomNum(generateRandomName(maxNum))
  }
  return (
    <div>
      <h1>{randomNum}</h1>
      <button onClick={changeRandomNum}>Generate new random number</button>
    </div>
  )
}

export default RandomNumber

// ЗАДАЧА при натисканні на кнопку - змінювати значення
// Щоб змінити стан, ми за допомогою Реакт хука useState, щоб його використати ми маємо його імпортувати
// Імпорт в фігурних дужках, так як це не звичайниій імпорт за умовчанням, це зовнішня бібліотека, зовнішній npm пакет
// Тепер ми можемо використвувати змінну useState, а це функція, в середині нашої функції RandomNumber
// Визиваємо useState та передаємо їй початкове значення useState(100), яка буде частиною стану (значенням за умовчанням) цього функціонального компонету, і ця функція повертає нам масив з двух елементів
// Далі, ця функція useState повертає масив з двух елементів, і методои деструктуризацуії ми можемо присвоїити це значення двух іншим змінним, напр. const [randomNum, setRandomNum] = useState(100)
// Далі, вже замість 100, в тегу Н1, ми пропишемо змінну в фігурних душках, так як це JS

// Наступний крок, створимо саму фуекцію генерування випадкового числа, це generateRandomName()
// Наступний крок, це додати функцію події кліка, onClick={},звертіть увагу, onClick пишеться в кемелКейс стилі, так це властивості компонета реакт, а div, h1, button - це компонети!!!

// useState - надає механізм зміни компонента, це робиться в даному випадку через визов функції setRandomNum
// Отже, при кліку ми передаємо назву функції changeRandomNum, через onClick={changeRandomNum}, звеніть увагу щоб без дужок і в фігурних дужках
// Ця функція визиває setRandomNum() в Реакт хуку useState, а воні в свою чергу генерує число через функцію generateRandomName()

// RandomNumber - це функція з бобочними ефектами, так як ми визиваємо і ній ще одну функцію яка вертає масив
// Також, зверніть увагу, що змінні об'явлені за допомогою const, але так як Реакт визива. цю функцію багатократно, все новий раз, тому може зиінювати стан. Виходить ми змінюємо компонент Реакт через зовнішню функцію.

// Так як цей компонент має містити тільки свою функцію, то generateRandomName() потрібно перемістити і інший файл, тобто модуль, що ми і зродили: створили папку utils, в ній файл та export, а тут import

// Наступний крок, це переждати обмеження максимального часла генерація через властивість
// Додали докоспонента App: maxNum={1000}
// Тут ми прийняли об'єкт props
// Зробили деструктуризацію props: const { maxNum } = props
// Передали maxNum: generateRandomName(maxNum)
// Викорситали maxNum в generateRandomName(): return Math.floor(Math.random() * maxNum)
